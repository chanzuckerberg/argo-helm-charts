# Service defaults
global:
  deploymentStage: ""
  replicaCount: 1

  # Settings for the primary container
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "latest"

  args: []
  command: []

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  dnsPolicy: ClusterFirst
  restartPolicy: Always

  # Probes for the primary container
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 30
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 30
  startupProbe:
    enabled: false
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 0
    timeoutSeconds: 1
    periodSeconds: 10
    exec:
      command:
        - ps
        - "-ef"

  progressDeadlineSeconds: 600

  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: "100m"
      memory: "128Mi"

  service:
    type: ClusterIP
    port: 80

  initContainers: []
  sidecars: []

  appContext:
    envContextConfigMapName: "" # App environment level configuration configmap name
    stackContextConfigMapName: "" # Stack level configuration configmap name

  appSecrets:
    envSecret: # App environment level configuration secret
      secretName: ""
      secretKey: ""
    stackSecret: # Stack level configuration secret
      secretName: ""
      secretKey: ""
    clusterSecret: # Cluster level configuration secret
      secretName: ""
      secretKey: ""

  # Global annotations to add to all resources
  annotations: {}
  # Labels to add to pods
  podLabels: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext:
    {}
    # fsGroup: 2000

  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  shareProcessNamespace: false

  ingress:
    enabled: true
    className: nginx
    host: chart-example.local
    paths:
      - path: /
        pathType: Prefix
    rules: []
    oidcProtected: false
    annotations:
      infra: "true"
      external-dns.alpha.kubernetes.io/exclude: "true"
      cert-manager.io/cluster-issue: nginx-issuer
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/affinity: "cookie"
      nginx.ingress.kubernetes.io/session-cookie-name: "argus_sticky_session"
      nginx.ingress.kubernetes.io/session-cookie-max-age: "600"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  nodeSelector:
    kubernetes.io/arch: arm64

  # Annotations to add to pods
  podAnnotations:
    linkerd.io/inject: enabled
    config.linkerd.io/skip-outbound-ports: 3306,5432,6379,9300,11211,4444,4567,4568,587,25,2525,465,2465

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  tolerations: []

  affinity: {}

  topologySpreadConstraints: []

  env: []
  envFrom: []

  persistence:
    enabled: false
    pvc:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: "default"
    existingClaim: ""
    mountPath: ""
  oidcProxy:
    enabled: false
    image:
      repository: quay.io/oauth2-proxy/oauth2-proxy
      tag: v7.6.0
    replicaCount: 2
    additionalSecrets: []
    additionalHeaders: []
    extraArgs: []
    # extraArgs:
    #   - --flag
    #   - --another-flag=2
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 2
        memory: 4Gi
# Service overrides
services:
  {}
  # service1:
  #   args: ["arg1", "arg2"]
  #   command: ["command1", "command2"]
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar1
  #       image: "sidecar1:latest"
  #     - name: sidecar2
  #       image: "sidecar2:latest"
  #   initContainers:
  #     - name: initContainer1
  #       image: "alpine:latest"
  #       command: ["echo", "Hello World"]
  # service2:
  #   startupProbe:
  #     enabled: true
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar3
  #       image: sidecar3:latest
  #     - name: sidecar4
  #       image: sidecar4:latest

cronJobs:
  {}
  # cronJob1:
  #   concurrencyPolicy: Forbid
  #   schedule: "* * * * *"
  #   image:
  #     repository: nginx
  #     pullPolicy: IfNotPresent
  #     tag: "latest"
  #   command: ["command1", "command2"]
  #   args: ["arg1", "arg2"]
