# Service defaults
global:
  replicaCount: 1

  # Settings for the primary container
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "latest"

  args: []
  command: []

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  dnsPolicy: ClusterFirst

  # Probes for the primary container
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 30
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /
      port: http
      scheme: HTTP
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 30
  startupProbe:
    enabled: false
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 0
    timeoutSeconds: 1
    periodSeconds: 10
    exec:
      command:
        - ps
        - '-ef'
    
  resources:
    limits:
      cpu: '1'
      memory: '1Gi'
    requests:
      cpu: '100m'
      memory: '128Mi'

  service:
    type: ClusterIP
    port: 80

  initContainers: []
  sidecars: []

  appConfig:
    envContextConfigMapName: "" # App environment level configuration configmap name
    stackContextConfigMapName: "" # Stack level configuration configmap name
    envSecretName: "" # App environment level configuration secret name
    stackSecretName: "" # Stack level configuration secret name

  # Global annotations to add to all resources
  annotations: {}
  # Annotations to add to pods
  podAnnotations: {}
  # Labels to add to pods
  podLabels: {}

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ingress:
    enabled: true
    className: ""
    host: chart-example.local
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

# Service overrides
services: {}
  # service1:
  #   args: ["arg1", "arg2"]
  #   command: ["command1", "command2"]
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar1
  #       image: "sidecar1:latest"
  #     - name: sidecar2
  #       image: "sidecar2:latest"
  #   initContainers:
  #     - name: initContainer1
  #       image: "alpine:latest"
  #       command: ["echo", "Hello World"]
  # service2:
  #   startupProbe:
  #     enabled: true
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar3
  #       image: sidecar3:latest
  #     - name: sidecar4
  #       image: sidecar4:latest
