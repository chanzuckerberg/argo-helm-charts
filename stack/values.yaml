## @section Global parameters
# Service defaults
global:
  ## @param global.deploymentStage Deployment stage (eg: rdev, staging, prod)
  deploymentStage: ""

  ## @param global.replicaCount Number of replicas
  replicaCount: 1

  # Settings for the primary container
  image:
    ## @param global.image.repository Image repository
    repository: nginx
    ## @param global.image.pullPolicy Image pull policy
    pullPolicy: IfNotPresent
    ## @param global.image.tag Image tag
    tag: "latest"

  ## @param global.command Command to run in the primary container
  command: []
  ## @param global.args Arguments to pass to the command in the primary container
  args: []

  ## @param global.imagePullSecrets Image pull secrets
  imagePullSecrets: []
  ## @param global.nameOverride Name to prefix the K8s resources with, combined with the stack name prefix
  nameOverride: ""
  ## @param global.fullnameOverride Name to prefix the K8s resources with, replaces the stack name prefix
  fullnameOverride: ""

  ## @param global.dnsPolicy DNS policy for the pod
  dnsPolicy: ClusterFirst
  ## @param global.restartPolicy Restart policy for the pod
  restartPolicy: Always

  # Probes for the primary container
  ## @section global.livenessProbe Liveness probe configuration
  livenessProbe:
    ## @param global.livenessProbe.failureThreshold Number of failures before the probe is considered failed
    failureThreshold: 3
    ## @section global.livenessProbe.httpGet HTTP probe configuration (exec & tcpSocket are also available)
    httpGet:
      ## @param global.livenessProbe.httpGet.path Path to probe
      path: /
      ## @param global.livenessProbe.httpGet.port Port to probe
      port: 3000
      ## @param global.livenessProbe.httpGet.scheme Scheme to use
      scheme: HTTP
    ## @param global.livenessProbe.periodSeconds How often to perform the probe
    periodSeconds: 10
    ## @param global.livenessProbe.successThreshold Number of successes before the probe is considered successful
    successThreshold: 1
    ## @param global.livenessProbe.timeoutSeconds Timeout for the probe
    timeoutSeconds: 1
    ## @param global.livenessProbe.initialDelaySeconds Number of seconds after the container has started before the probe is first initiated
    initialDelaySeconds: 30
  
  ## @section global.readinessProbe Readiness probe configuration
  readinessProbe:
    ## @param global.readinessProbe.failureThreshold Number of failures before the probe is considered failed
    failureThreshold: 3
    ## @section global.readinessProbe.httpGet HTTP probe configuration (exec & tcpSocket are also available)
    httpGet:
      ## @param global.readinessProbe.httpGet.path Path to probe
      path: /
      ## @param global.readinessProbe.httpGet.port Port to probe
      port: http
      ## @param global.readinessProbe.httpGet.scheme Scheme to use
      scheme: HTTP
    ## @param global.readinessProbe.periodSeconds How often to perform the probe
    periodSeconds: 10
    ## @param global.readinessProbe.successThreshold Number of successes before the probe is considered successful
    successThreshold: 1
    ## @param global.readinessProbe.timeoutSeconds Timeout for the probe
    timeoutSeconds: 1
    ## @param global.readinessProbe.initialDelaySeconds Number of seconds after the container has started before the probe is first initiated
    initialDelaySeconds: 30
  
  ## @section global.startupProbe Startup probe configuration
  startupProbe:
    ## @param global.startupProbe.enabled Enable the startup probe
    enabled: false
    ## @param global.startupProbe.failureThreshold Number of failures before the probe is considered failed
    failureThreshold: 3
    ## @param global.startupProbe.successThreshold Number of successes before the probe is considered successful
    successThreshold: 1
    ## @param global.startupProbe.initialDelaySeconds Number of seconds after the container has started before the probe is first initiated
    initialDelaySeconds: 0
    ## @param global.startupProbe.timeoutSeconds Timeout for the probe
    timeoutSeconds: 1
    ## @param global.startupProbe.periodSeconds How often to perform the probe
    periodSeconds: 10
    ## Probe configuration (httpGet & tcpSocket are also available)
    exec:
      ## @param global.startupProbe.exec.command Command to run in the probe
      command:
        - ps
        - "-ef"

  ## @param global.progressDeadlineSeconds the number of seconds the Deployment controller waits before indicating (in the Deployment status) that the Deployment progress has stalled
  progressDeadlineSeconds: 600

  ## Resource requests and limits for the primary container
  resources:
    limits:
      ## @param global.resources.limits.cpu CPU limit
      cpu: "1"
      ## @param global.resources.limits.memory Memory limit
      memory: "1Gi"
    requests:
      ## @param global.resources.requests.cpu CPU request
      cpu: "100m"
      ## @param global.resources.requests.memory Memory request
      memory: "128Mi"

  ## Service configuration
  service:
    ## @param global.service.type Service type
    type: ClusterIP
    ## @param global.service.port Service port
    port: 80

  ## @param global.initContainers List of init containers
  initContainers: []
  ## @param global.sidecars List of sidecars
  sidecars: []

  ## @skip App context (provided by Argus API)
  appContext:
    ## @skip global.appContext.envContextConfigMapName App environment level configuration configmap name
    envContextConfigMapName: ""
    ## @skip global.appContext.stackContextConfigMapName Stack level configuration configmap name
    stackContextConfigMapName: ""

  ## @skip App secrets (provided by Argus API)
  appSecrets:
    envSecret:
      ## @skip global.appSecrets.envSecret.secretName Environment-level Kube secret name to write External Secrets to
      secretName: ""
      ## @skip global.appSecrets.envSecret.secretKey Environment-level secret key to map External Secrets from
      secretKey: ""
    stackSecret:
      ## @skip global.appSecrets.stackSecret.secretName Stack-level Kube secret name to write External Secrets to
      secretName: ""
      ## @skip global.appSecrets.stackSecret.secretKey Stack-level secret key to map External Secrets from
      secretKey: ""
    clusterSecret:
      ## @skip global.appSecrets.clusterSecret.secretName Cluster-level Kube secret name to write External Secrets to
      secretName: ""
      ## @skip global.appSecrets.clusterSecret.secretKey Cluster-level secret key to map External Secrets from
      secretKey: ""

  ## @param global.annotations Global annotations to add to all resources
  annotations: {}
  ## @param global.podLabels Global labels to add to all pods
  podLabels: {}

  # Service account configuration
  serviceAccount:
    ## @param global.serviceAccount.create Specifies whether a service account should be created
    create: false
    ## @param global.serviceAccount.automount Specifies whether to automatically mount a ServiceAccount's API credentials
    automount: true
    ## @param global.serviceAccount.annotations Annotations to add to the service account
    annotations: {}
    ## @param global.serviceAccount.name Name of the service account to use (if not set and create is true, a name is generated using the fullname template)
    name: ""

  ## @param global.podSecurityContext Pod security context
  podSecurityContext:
    {}
    # fsGroup: 2000

  ## @param global.securityContext Security context
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## @param global.shareProcessNamespace Share process namespace
  shareProcessNamespace: false

  ## @section global.ingress Ingress configuration
  ingress:
    ## @param global.ingress.enabled Enable ingress
    enabled: true
    ## @param global.ingress.className Ingress class name
    className: nginx
    ## @param global.ingress.host Ingress host
    host: chart-example.local
    ## @section global.ingress.paths List of ingress paths
    paths:
      - 
        ## @param global.ingress.paths[0].path Ingress path
        path: /
        ## @param global.ingress.paths[0].pathType Ingress path type
        pathType: Prefix
    ## @param global.ingress.rules List of ingress rules
    rules: []
    ## @param global.ingress.oidcProtected Enable OIDC protection
    oidcProtected: false
    annotations:
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/proxy-connect-timeout Nginx ingress proxy connect timeout
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/proxy-send-timeout Nginx ingress proxy send timeout
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/proxy-read-timeout Nginx ingress proxy read timeout
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/affinity Nginx ingress affinity
      nginx.ingress.kubernetes.io/affinity: "cookie"
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/session-cookie-name Nginx ingress session cookie name
      nginx.ingress.kubernetes.io/session-cookie-name: "argus_sticky_session"
      ## @param global.ingress.annotations.nginx.ingress.kubernetes.io/session-cookie-max-age Nginx ingress session cookie max age
      nginx.ingress.kubernetes.io/session-cookie-max-age: "600"
    ## @param global.ingress.tls List of ingress TLS configurations
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  
  nodeSelector:
    ## @param global.nodeSelector.kubernetes.io/arch Node selector for architecture
    kubernetes.io/arch: arm64

  # Annotations to add to pods
  podAnnotations:
    ## @param global.podAnnotations.linkerd.io/inject Linkerd injection annotation
    linkerd.io/inject: enabled
    ## @param global.podAnnotations.config.linkerd.io/skip-outbound-ports Linkerd skip outbound ports annotation
    config.linkerd.io/skip-outbound-ports: 3306,5432,6379,9300,11211,4444,4567,4568,587,25,2525,465,2465

  # Autoscaling configuration
  autoscaling:
    ## @param global.autoscaling.enabled Enable autoscaling
    enabled: true
    ## @param global.autoscaling.minReplicas Minimum number of replicas
    minReplicas: 1
    ## @param global.autoscaling.maxReplicas Maximum number of replicas
    maxReplicas: 10
    ## @param global.autoscaling.targetCPUUtilizationPercentage Target CPU utilization percentage
    targetCPUUtilizationPercentage: 80
    ## @param global.autoscaling.targetMemoryUtilizationPercentage Target memory utilization percentage
    targetMemoryUtilizationPercentage: 80

  ## @param global.volumes Additional volumes on the output Deployment definition
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  ## @param global.volumeMounts Additional volume mounts on the output Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  ## @param global.tolerations Tolerations for the pod
  tolerations: []

  ## @param global.affinity Affinity for the pod
  affinity: {}

  ## @param global.topologySpreadConstraints Topology spread constraints for the pod
  topologySpreadConstraints: []

  env:
    -
      ## @param global.env[0].name Environment variable name
      name: __ARGUS
      ## @param global.env[0].value Environment variable value
      value: "true"

  ## @param global.envFrom Environment variables from configmaps or secrets
  envFrom: []

  persistence:
    ## @param global.persistence.enabled Enable persistence
    enabled: false
    pvc:
      ## @param global.persistence.pvc.accessModes Access modes
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          ## @param global.persistence.pvc.resources.requests.storage Storage resource request
          storage: 8Gi
      ## @param global.persistence.pvc.storageClassName Storage class name
      storageClassName: "default"
    ## @param global.persistence.existingClaim Existing PVC name
    existingClaim: ""
    ## @param global.persistence.mountPath Mount path for the PVC
    mountPath: ""

  oidcProxy:
    ## @param global.oidcProxy.enabled Enable OIDC proxy
    enabled: false
    image:
      ## @param global.oidcProxy.image.repository Image repository
      repository: quay.io/oauth2-proxy/oauth2-proxy
      ## @param global.oidcProxy.image.tag Image tag
      tag: v7.6.0
    ## @param global.oidcProxy.replicaCount Number of replicas
    replicaCount: 3
    ## @param global.oidcProxy.additionalSecrets Additional secrets to mount
    additionalSecrets: []
    ## @param global.oidcProxy.additionalHeaders Additional headers to add
    additionalHeaders: []
    ## @param global.oidcProxy.annotations Annotations to add to the OIDC proxy
    annotations: {}
    ## @param global.oidcProxy.volumeMounts Volume mounts for the OIDC proxy
    volumeMounts: []
    ## @param global.oidcProxy.skipAuth Paths to skip authentication
    skipAuth: []
    # skipAuth:
    #   - path: "/healthz"
    #     method: GET
    ## @param global.oidcProxy.cookieRefresh Refresh tokens and cookies after this period
    cookieRefresh: "59m"
    ## @param global.oidcProxy.extraArgs Extra arguments to pass to the OIDC proxy
    extraArgs: []
    # extraArgs:
    #   - --flag
    #   - --another-flag=2
    resources:
      limits:
        ## @param global.oidcProxy.resources.limits.cpu CPU limit
        cpu: 2
        ## @param global.oidcProxy.resources.limits.memory Memory limit
        memory: 4Gi
      requests:
        ## @param global.oidcProxy.resources.requests.cpu CPU request
        cpu: 2
        ## @param global.oidcProxy.resources.requests.memory Memory request
        memory: 4Gi

## @param services Services to deploy, all values in the above global section are inherited by the services and each service can override them
services:
  {}
  # service1:
  #   args: ["arg1", "arg2"]
  #   command: ["command1", "command2"]
  #   serviceAccount:
  #     create: true
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar1
  #       image: "sidecar1:latest"
  #     - name: sidecar2
  #       image: "sidecar2:latest"
  #   initContainers:
  #     - name: initContainer1
  #       image: "alpine:latest"
  #       command: ["echo", "Hello World"]
  # service2:
  #   startupProbe:
  #     enabled: true
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     maxUnavailable: 1
  #   replicaCount: 2
  #   sidecars:
  #     - name: sidecar3
  #       image: sidecar3:latest
  #     - name: sidecar4
  #       image: sidecar4:latest

## @param cronJobs Cron jobs to deploy, all values in the above global section are inherited by the cron jobs and each cron job can override them
cronJobs:
  {}
  # cronJob1:
  #   concurrencyPolicy: Forbid
  #   schedule: "* * * * *"
  #   serviceAccount:
  #     create: true
  #   image:
  #     repository: nginx
  #     pullPolicy: IfNotPresent
  #     tag: "latest"
  #   command: ["command1", "command2"]
  #   args: ["arg1", "arg2"]

## @param jobs Jobs to deploy, all values in the above global section are inherited by the jobs and each job can override them
jobs:
  {}
  # job1:
  #   activeDeadlineSeconds: 300
  #   backoffLimit: 2
  #   completions: 5
  #   parallelism: 3
  #   serviceAccount:
  #     create: true
  #     annotations:
  #       "eks.amazonaws.com/role-arn": some-role
  #   image:
  #     repository: my-repo
  #     tag: sha-mytag
  #   command: ["hello-world"]
  #   args: ["arg1", "arg2"]
