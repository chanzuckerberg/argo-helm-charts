{{- define "service.externalSecretsTarget" -}}
target:
  # Enum with values: 'Owner', 'Merge', or 'None'
  # Default value of 'Owner'
  # Owner creates the secret and sets .metadata.ownerReferences of the resource
  # Merge does not create the secret, but merges in the data fields to the secret
  # None does not create a secret (future use with injector)
  # TODO: make this secret by default
  creationPolicy: 'Merge'
  deletionPolicy: "Delete"
{{- end}}

{{- define "service.externalSecretsData" -}}
data:
  - remoteRef:
      conversionStrategy: Default
      decodingStrategy: None
      key: {{ . }}
      metadataPolicy: None
      version: AWSCURRENT
{{- end}}

{{ $global := . }}
{{ range $serviceName, $serviceValues := .Values.services }}
  {{- $globalValuesDict := $global.Values.global | toYaml -}}
  {{- $values := fromYaml $globalValuesDict -}}
  {{- $values = set $values "name" $serviceName -}}
  {{- $values := mergeOverwrite $values $serviceValues -}}
  {{- $service := dict "Chart" $global.Chart "Release" $global.Release "Capabilities" $global.Capabilities "Values" $values -}}

{{ range $appConfigKey, $secretName := .Values.appConfig }}
{{- with $service -}}
--- 
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $secretName }}
  labels:
  {{- include "service.labels" . | nindent 4 }}
spec:
  secretStoreRef:
    # TODO: make this
    name: aws-secretsmanager
    kind: SecretStore
  refreshInterval: "30s"
  {{- include "service.externalSecretsTarget" . | nindent 2 -}}
  {{- include "service.externalSecretsData" $secretName | nindent 2 -}}
{{end}}
{{end}}
