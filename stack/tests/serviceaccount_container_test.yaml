# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: test deployment
templates:
  - deployment.yaml
  - serviceaccount_container.yaml
tests:
  - it: should create serviceAccount for initContainer and sidecar but they should be different from serviceAccount of main container
    set:
      services:
        service1:
          serviceAccount: 
            name: "service1"
            create: true
          sidecars:
            - name: sidecar1
              image: "sidecar1:latest"
              serviceAccount: 
                create: true
                annotations:
                  "eks.amazonaws.com/role-arn": some-role-for-sidecar
          initContainers:
            - name: initContainer1
              image:
                repository: "node"
                tag: "20.0.0"
              serviceAccount: 
                create: true
                annotations:
                  "eks.amazonaws.com/role-arn": some-role-for-initContainers
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "service1"
        template: deployment.yaml
      - equal:
          path: spec.template.spec.initContainers[0].serviceAccountName
          value: "release-name-stack-initContainer1"
        template: deployment.yaml
      - hasDocuments:
          count: 2
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.name
          value: "release-name-stack-initContainer1"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.annotations["eks.amazonaws.com/role-arn"]
          value: "some-role-for-initContainers"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "stack"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "1.16.0"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: "Helm"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "release-name-stack-initcontainer1"
        template: serviceaccount_container.yaml
      - documentIndex: 0
        equal:
          path: automountServiceAccountToken
          value: true
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.name
          value: "release-name-stack-sidecar1"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.annotations["eks.amazonaws.com/role-arn"]
          value: "some-role-for-sidecar"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: "stack"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: "RELEASE-NAME"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.labels["app.kubernetes.io/version"]
          value: "1.16.0"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: "Helm"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: metadata.labels["app.kubernetes.io/service"]
          value: "release-name-stack-sidecar1"
        template: serviceaccount_container.yaml
      - documentIndex: 1
        equal:
          path: automountServiceAccountToken
          value: true
        template: serviceaccount_container.yaml
  
  - it: should not create serviceAccount for initContainer or sidecar
    set:
      services:
        service1:
          sidecars:
            - name: sidecar2
              image: "sidecar1:latest"
              serviceAccount: 
                name: "some-service-sidecar2-serviceAccount"
          initContainers:
            - name: initContainer2
              image:
                repository: "node"
                tag: "20.0.0"
              serviceAccount: 
                name: "some-service-initContainer2-serviceAccount"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].serviceAccountName
          value: "some-service-initContainer2-serviceAccount"
        template: deployment.yaml
      - equal:
          path: spec.template.spec.containers[1].serviceAccountName
          value: "some-service-sidecar2-serviceAccount"
        template: deployment.yaml
      - hasDocuments:
          count: 0
        template: serviceaccount_container.yaml
  
  - it: should not have serviceAccountName field
    set:
      services:
        service1:
          initContainers:
            - name: initContainer2
              image:
                repository: "node"
                tag: "20.0.0"
    asserts:
      - notExists:
          path: spec.template.spec.initContainers[0].serviceAccountName
        template: deployment.yaml
      - hasDocuments:
          count: 0
        template: serviceaccount_container.yaml

