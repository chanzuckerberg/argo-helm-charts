# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: test deployment
templates:
  - deployment.yaml
tests:
  - it: should work
    set:
      services:
        service1:
          args: ["arg1", "arg2"]
          command: ["command1", "command2"]
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 10
            maxUnavailable: 1
          replicaCount: 2
          sidecars:
            - name: sidecar1
              image: "sidecar1:latest"
            - name: sidecar2
              image: "sidecar2:latest"
          initContainers:
            - name: initContainer1
              image: "alpine:latest"
              command: ["echo", "Hello World"]
    asserts:
      - isKind:
          of: Deployment
      - isSubset:
          path: spec
          content:
            revisionHistoryLimit: 3
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment

  - it: sets replicas when autoscaling is disabled
    set:
      services:
        service1:
          autoscaling:
            enabled: false
          replicaCount: 2
    asserts:
      - equal:
          path: spec.replicas
          value: 2
  - it: does not set replicas when autoscaling is enabled
    set:
      services:
        service1:
          autoscaling:
            enabled: true
          replicaCount: 2
    asserts:
      - notExists:
          path: spec.replicas

  - it: uses httpGet probe by default
    set:
      services:
        service1:
          autoscaling:
            enabled: false
          replicaCount: 1
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
  - it: uses exec probe when supplied
    set:
      services:
        service1:
          autoscaling:
            enabled: false
          replicaCount: 1
          livenessProbe:
            exec:
              command: ["echo", "Hello World"]
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 3
            exec:
              command: ["echo", "Hello World"]
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
  - it: uses tcpSocket probe when supplied
    set:
      services:
        service1:
          autoscaling:
            enabled: false
          replicaCount: 1
          livenessProbe:
            tcpSocket:
              port: 80
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 3
            tcpSocket:
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
  - it: uses a combination of probes
    set:
      services:
        service1:
          autoscaling:
            enabled: false
          replicaCount: 1
          livenessProbe:
            timeoutSeconds: 10
            tcpSocket:
              port: 80
          readinessProbe:
            exec:
              command: ["echo", "Hello World"]
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 3
            tcpSocket:
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            failureThreshold: 3
            exec:
              command: ["echo", "Hello World"]
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
  - it: uses supplied initContainer image string value
    set:
      services:
        service1:
          initContainers:
            - name: initContainer1
              image: "alpine:latest"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "alpine:latest"
  - it: formats supplied initContainer image tag and repo
    set:
      services:
        service1:
          initContainers:
            - name: initContainer1
              image:
                repository: "node"
                tag: "20.0.0"
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "node:20.0.0"
  - it: uses supplied sidecar image string value
    set:
      services:
        service1:
          sidecars:
            - name: sidecar1
              image: "alpine:latest"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: "nginx:latest"
      - equal:
          path: spec.template.spec.containers[1].image
          value: "alpine:latest"
  - it: formats supplied sidecar image tag and repo
    set:
      services:
        service1:
          sidecars:
            - name: sidecar2
              image:
                repository: "node"
                tag: "20.0.0"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: "nginx:latest"
      - equal:
          path: spec.template.spec.containers[1].image
          value: "node:20.0.0"
  - it: overwrites the name
    set:
      global:
        oidcProxy:
          enable: true
        fullnameOverride: "overwrittenfull"
      services:
        service1:
          ingress:
            oidcProtected: true
          args: ["arg1", "arg2"]
          command: ["command1", "command2"]
          autoscaling:
            enabled: true
            minReplicas: 2
            maxReplicas: 10
            maxUnavailable: 1
          replicaCount: 2
          sidecars:
            - name: sidecar1
              image: "sidecar1:latest"
            - name: sidecar2
              image: "sidecar2:latest"
          initContainers:
            - name: initContainer1
              image: "alpine:latest"
              command: ["echo", "Hello World"]
    asserts:
      - equal:
          path: metadata.name
          value: "overwrittenfull-service1"
  
  - it: uses ports if provided and autofill name or protocol with default value if left empty
    set:
      services:
        service1:
          args: ["arg1", "arg2"]
          command: ["command1", "command2"]
          service:
            ports:
              - name: http
                containerPort: 8080
              - name: metrics
                containerPort: 9090
                protocol: TCP
    asserts:
      - lengthEqual:
          path:  spec.template.spec.containers[0].ports
          count: 2
      - equal:
          path: spec.template.spec.containers[0].ports[0]
          value: 
            name: http
            containerPort: 8080
            protocol: TCP
      - equal:
          path: spec.template.spec.containers[0].ports[1]
          value:
            name: metrics
            containerPort: 9090
            protocol: TCP
  
  - it: uses port if ports not provided (legacy behavior for backward compatibility)
    set:
      services:
        service1:
          args: ["arg1", "arg2"]
          command: ["command1", "command2"]
          service:
            port: 3000

    asserts:
      - lengthEqual:
          path:  spec.template.spec.containers[0].ports
          count: 1
      - equal:
          path: spec.template.spec.containers[0].ports[0]
          value: 
            name: http
            containerPort: 3000
            protocol: TCP
  
  - it: ensure there would be default port 80 if no ports or port is provided
    set:
      services:
        service1:
          args: ["arg1", "arg2"]
          command: ["command1", "command2"]

    asserts:
      - lengthEqual:
          path:  spec.template.spec.containers[0].ports
          count: 1
      - equal:
          path: spec.template.spec.containers[0].ports[0]
          value: 
            name: http
            containerPort: 80
            protocol: TCP