name: Release Charts

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-chart-released:
    runs-on: [ARM64, self-hosted, Linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check Release
        id: chart_released
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const result = /refs\/tags\/(.*)-v[0-9.]+/.exec(context.ref)
            if (result && result.length >= 2) {
              const releaseName = result[1];
              core.setOutput("released", fs.existsSync(path.join(releaseName, 'Chart.yaml')));
              core.setOutput("release_name", releaseName);
            } else {
              core.setOutput("released", false);
            }
    outputs:
      chart_released: ${{ steps.chart_released.outputs.released }}
      release_name: ${{ steps.chart_released.outputs.release_name }}
  release:
    if: ${{ needs.check-chart-released.outputs.chart_released == 'true' }}
    needs:
      - check-chart-released
    runs-on: [ARM64, self-hosted, Linux]
    steps:
      - name: Parse Tag
        id: parse_tag
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            if (!context.ref.startsWith('refs/tags/${{ needs.check-chart-released.outputs.release_name }}-v')) {
              throw new Error(`Failed to parse version from tag: ${context.ref}`);
            }
            const version = context.ref.replace('refs/tags/${{ needs.check-chart-released.outputs.release_name }}-v', '')
            return version
      - name: Checkout
        uses: actions/checkout@v4
      - name: Chart Release
        uses: ./.github/actions/chart-release
        with:
          version: ${{ steps.parse_tag.outputs.result }}
          prerelease: false
          release_name: ${{ needs.check-chart-released.outputs.release_name }}
          github_app_id: ${{ secrets.CZI_RELEASE_PLEASE_APP_ID }}
          github_private_key: ${{ secrets.CZI_RELEASE_PLEASE_PK }}
